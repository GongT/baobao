import { relative, resolve } from 'path';
import { collectImportNames } from '../importIds';
import { ValidImportOrExportDeclaration } from '../types';
import { resolveModule } from './resolve.simulate';
import { IImportInfo, IImportInfoCommonjs, IImportInfoMissing, IImportInfoModule } from './types';

/**
 * resolve import info from node_modules
 * @param packageJsonPath CURRENT project's package.json
 */
export function resolveTypescriptModule(
	node: ValidImportOrExportDeclaration,
	packageJsonPath: string
): IImportInfo | IImportInfoMissing {
	const importPath = node.moduleSpecifier.text;
	const { packageName, filePath } = splitPackageName(importPath);
	// console.log('---------------- %s [%s]', importPath, basename(node.getSourceFile().fileName));

	const result = resolveModule(
		'module',
		resolve(packageJsonPath, '../node_modules', packageName, 'package.json'),
		filePath,
		true
	);

	if (result) {
		const id = relative(resolve(packageJsonPath, '../node_modules'), result).replace(/^\.\//, '');
		return <IImportInfoModule>{
			nodeResolve: id,
			specifier: importPath,
			type: 'module',
			fsPath: result,
			identifiers: collectImportNames(node),
		};
	}

	const result2 = resolveModule(
		'commonjs',
		resolve(packageJsonPath, '../node_modules', packageName, 'package.json'),
		filePath,
		true
	);

	if (result2) {
		const id = relative(resolve(packageJsonPath, '../node_modules'), result2).replace(/^\.\//, '');
		return <IImportInfoCommonjs>{
			nodeResolve: id,
			specifier: importPath,
			type: 'commonjs',
			fsPath: result2,
			identifiers: collectImportNames(node),
		};
	}

	return <IImportInfoMissing>{ specifier: importPath, type: 'missing' };
}

function splitPackageName(path: string) {
	let i1 = path.indexOf('/');
	if (i1 === -1) return { packageName: path, filePath: '.' };
	if (path.startsWith('@')) {
		i1 = path.indexOf('/', i1 + 1);
		if (i1 === -1) return { packageName: path, filePath: '.' };
	}
	return { packageName: path.slice(0, i1), filePath: path.slice(i1 + 1) };
}
