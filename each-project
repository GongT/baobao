#!/usr/bin/env node

'use strict';

const {resolve} = require('path');

const isTTY = process.stdout.isTTY && process.stderr.isTTY;
if (isTTY) {
	console.error('cwd: %s', process.cwd());
}

const [command, ...args] = process.argv.slice(2);
const isLocalCommand = command && command.includes('/');
const absCommand = command && isLocalCommand? resolve(__dirname, command) : command;
if (isLocalCommand) {
	process.env.PATH = process.cwd() + ':' + resolve(process.cwd(), 'node_modules/.bin') + ':' + process.env.PATH;
}
if (command) {
	process.env.PATH += ':./node_modules/.bin:' + resolve(__dirname, 'common/temp/node_modules/.bin');
}

const {spawnSync} = require('child_process');

const rushText = require('fs').readFileSync('./rush.json', 'utf-8');
let rushData;
for (const {packageName, projectFolder} of eval('rushData=' + rushText).projects) {
	const absProjectFolder = resolve(__dirname, projectFolder);
	if (command) {
		if (isTTY) {
			console.error('\n\x1b[38;5;8m> %s\n\t+ PACKAGE_NAME=%s %s %s\x1b[0m', absProjectFolder, packageName, absCommand, args.join(' '));
		}
		spawnSync(command, args, {
			stdio: 'inherit',
			cwd: absProjectFolder,
			env: {
				...process.env,
				PACKAGE_NAME: packageName,
				PACKAGE_FOLDER: absProjectFolder,
				ORIGINAL_CWD: process.cwd(),
			},
		});
	} else {
		console.log(absProjectFolder);
	}
}
